//*************************************************************************
//  Account Balancing Program
//  Programmer: Ariadna Ayala
//  Completed: 09/13/2019
//  Status: Completed 
//
//  This ia a revised version of Checkbook Balancing program (PA2). It performs the same operations 
//  as its prototype. The program has been restructured and additional service fees were added.
//*************************************************************************

#include <iostream>
#include <iomanip>
using namespace std;


double transactC (double startBalance double totalServFees);
double transactD (double startBalance double totalServFees);
double TransactE (double startBalance double totalServFees);

int main()
{
    // Part 1: Setting variables and collecting initial user input for
    // starting balance and displays commands options available for user.
    
    char transacType = ' ';                                         // User choice of transaction type.
    double  startBalance = 0.0,                                     // Initial balance of the account.
            totalServFees = 0.0;                                    // Total service fees accumulator.
    
    
    cout << fixed << showpoint << setprecision(2);                  // Setting floating point output format to
                                                                    // two decimal places. 
    
    cout << "Welcome to Checkbook Balancing program" << endl;
    cout << "Commands: \nC - process a check;\n" <<
    "D - process a deposit;\n" <<
    "E - end of month processing and exit the program." << endl;
    cout << "><><><><><><><><><><><><><><><><><><><><><><><><><><><><>" << endl; 

    // PART 2: Decision making based on user input. This part collects user's input for
    // a transaction type and executes an appropriate function that corresponds to the input. 
    
    
    while (transacType == 'e' || transacType != 'E')
    {
        cout << "Enter your beginning balance and transaction type: ";
        cin >> startBalance, transacType;
        
        if (transacType == 'c' || transacType == 'C')
        {
            transactC (startBalance, totalServFees);
        }
        
        else if (transacType == 'd' || transacType == 'D')
        {
            transacD (startBalance, totalServFees);
        }
        
        else if (transacType == 'e' || transacType == 'E')
        {
            transacE (startBalance, totalServFees);
            // BREAK???????
        }
        else
        {
            cout << "\nERROR! Invalid command entered. Please, try again.";
        }
    return 0;
}

 // *****************************************************************************************************************************
 // ADDITIONAL FUNCTIONS TO BE WRITTEN
